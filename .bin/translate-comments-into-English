# ./env/bin/python
# -*- coding: utf-8 -*-
# Time-stamp: "2024-06-13 09:39:37 (ywatanabe)"

import io
import os
import shutil
import sys

import openai
import pkg_resources

# Check the version of the openai package
required_version = "1.0.0"
current_version = pkg_resources.get_distribution("openai").version
# Compare the current version with the required version
if pkg_resources.parse_version(current_version) < pkg_resources.parse_version(
    required_version
):
    raise ImportError(
        f"openai package version must be at least {required_version}, found {current_version}"
    )
from openai import OpenAI


class ChatGPT(object):
    """
    Example:
        gpt = ChatGPT()
        gpt("Hi")
    """

    def __init__(
        self,
        system_setting="",
        chatgpt_api_key=None,
        model="gpt-4-Turbo-preview",
    ):
        self.system_setting = system_setting
        self.model = model
        self.counter = 0
        openai.api_key = chatgpt_api_key
        self.client = OpenAI()

        self.chat_history = []
        self.chat_history.append(
            {
                "role": "system",
                "content": system_setting,
            }
        )

    @staticmethod
    def remove_old_history(chat_history, n_limit=1):
        if len(chat_history) > n_limit:
            chat_history = [chat_history[0]] + chat_history[
                len(chat_history) - n_limit :
            ]
        return chat_history

    def __call__(self, text):
        original_stdout = sys.stdout
        sys.stdout = io.StringIO()

        self.counter += 1

        if text is None:
            text = ""
        try:
            self.chat_history.append({"role": "user", "content": text})
            self.chat_history = self.remove_old_history(self.chat_history)

            response = self.client.chat.completions.create(
                model=self.model,
                messages=self.chat_history,
                stream=False,
            )
            out_text = response.choices[0].message.content

            self.chat_history.append(
                {"role": "assistant", "content": out_text}
            )
            sys.stdout = original_stdout

            return out_text

        except Exception as e:
            print(e)
            sys.stdout = original_stdout
            return e


def save_text(spath, content):
    with open(spath, "w") as file:
        file.write(content)


def load_text(lpath):
    with open(lpath, "r") as file:
        return file.read()


def translate_by_GPT(lpath):
    # Parameters
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    VALUE_ERROR_MESSAGE = """
        The OpenAI API key must be set as an environment variable to use ChatGPT. Please visit https://openai.com/blog/openai-api for more information. To set the key, run the command: echo 'export OPENAI_API_KEY=\"<YOUR_OPENAI_API_KEY>\"' >> ~/.bashrc. Replace <YOUR_OPENAI_API_KEY> with your actual API key, which might look similar to 'sk**AN'.
        """
    if OPENAI_API_KEY is None:
        raise ValueError(VALUE_ERROR_MESSAGE)

    # GPT instance
    gpt = ChatGPT(OPENAI_API_KEY)
    text = load_text(lpath)
    translate_instruction = """
    Please translate all comments in programming scripts into English.
    Never change the program itself; the script should work exactly in the same way as before your translation.

    My usage of you is as follows:

    $ python translate.py script.py
    $ python translate.py script.cs
    $ python translate.py script.html

    ... and for other programming languages...

    Now, the script file is as follows:
    """

    # Main
    print(f"\nTranslating the comments of {lpath} into English...")
    translated_text = gpt(translate_instruction + text)

    # Saves the translated file
    dir, fname = os.path.split(lpath)
    ext = os.path.splitext(fname)[1]
    spath = os.path.join(dir, fname.replace(ext, f"_en{ext}"))
    save_text(spath, translated_text)
    print(f"\nTranslated: {spath}")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("lpath")
    args = parser.parse_args()

    translate_by_GPT(args.lpath)